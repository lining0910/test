package com.taole.member.service.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.taole.framework.rest.RestUrlRuler;
import com.taole.framework.rest.ReturnResult;
import com.taole.framework.service.ServiceResult;
import com.taole.member.ProjectConfig;
import com.taole.member.domain.User;
import com.taole.member.domain.param.UserApi.Login;
import com.taole.member.domain.param.UserApi.WxLogin;
import com.taole.member.manager.SmsVerifyManager;
import com.taole.member.manager.UserManager;
import com.taole.member.utils.RestClientUtil;
import com.taole.member.utils.SmsSenderUtil;

@Controller
@Api(tags = { "客户端用户操作接口管理" })
@RequestMapping(value = RestUrlRuler.REST_ROOT + "/" + ProjectConfig.PREFIX + "UserApi")
public class UserApi {
	
	private Logger logger = LoggerFactory.getLogger(UserApi.class);
	
	@Autowired
	private UserManager userManager;
	
	@Autowired
	private SmsVerifyManager smsVerifyManager;
	
	@RequestMapping(value = "/collection/sendVerifyCode", method = RequestMethod.GET, produces = "application/json;")
	@ApiOperation(value = "发送短信验证码", httpMethod = "GET", response = ServiceResult.class)
	public @ResponseBody Object sendVerifyCode(@ApiParam(value = "手机号", name = "mobileNum", required = true) @RequestParam String mobileNum){
		try {
			
			if(StringUtils.isBlank(mobileNum))
				return new ServiceResult(ReturnResult.VALIDATION_ERROR, "用户手机号不能为空！");
			
			if(!SmsSenderUtil.isMobileNumber(mobileNum))
				return new ServiceResult(ReturnResult.VALIDATION_ERROR, "用户手机号输入错误！");
			
			String result = userManager.sendSmsVerifyCode(mobileNum);
			if("100".equals(result))
				return new ServiceResult(ReturnResult.SUCCESS, "验证码获取成功！");
			
			return new ServiceResult(ReturnResult.FAILURE, result);
		} catch (Exception e) {
			logger.error(ProjectConfig.PREFIX + "UserApi" + ".sendVerifyCode:{}", e);
			return new ServiceResult(ReturnResult.FAILURE, "获取验证码失败: " + e.getMessage());
		}
	}
	
	@RequestMapping(value = "/collection/login", method = RequestMethod.POST, produces = "application/json;")
	@ApiOperation(value = "用户账号登陆/注册", httpMethod = "POST", response = ServiceResult.class)
	public @ResponseBody Object login(@RequestBody Login.UserApiLoginReq req){
		
		try {
			if(StringUtils.isBlank(req.getMobileNum()))
				return new ServiceResult(ReturnResult.VALIDATION_ERROR, "用户手机号不能为空！");
			
			if(!SmsSenderUtil.isMobileNumber(req.getMobileNum()))
				return new ServiceResult(ReturnResult.VALIDATION_ERROR, "用户手机号输入错误！");
			
			if(StringUtils.isBlank(req.getVerifyCode()))
				return new ServiceResult(ReturnResult.VALIDATION_ERROR, "验证码不能为空！");
			
			if(!SmsSenderUtil.isVerifyCode(req.getVerifyCode()))
				return new ServiceResult(ReturnResult.VALIDATION_ERROR, "用户手机号输入错误！");
			
			String validateVerifyCodeResult = smsVerifyManager.validateVerifyCode(req.getVerifyCode(), req.getMobileNum());
			if(!"100".equals(validateVerifyCodeResult))
				return new ServiceResult(ReturnResult.VALIDATION_ERROR, validateVerifyCodeResult);
			
			User user = userManager.loginOrRegister(req.getMobileNum());
			
			JSONObject resultObj = loginResult(user);
			
			return new ServiceResult(ReturnResult.SUCCESS, resultObj);
			
		} catch (Exception e) {
			logger.error(ProjectConfig.PREFIX + "UserApi" + ".login:{}", e);
			return new ServiceResult(ReturnResult.FAILURE, "登陆失败: " + e.getMessage());
		}
	}
	
	@RequestMapping(value = "/collection/wxLogin", method = RequestMethod.POST, produces = "application/json;")
	@ApiOperation(value = "用户微信账号登陆/注册", httpMethod = "POST", response = ServiceResult.class)
	public @ResponseBody Object wxLogin(@RequestBody WxLogin.UserApiWxLoginReq req){
		
		try {
			String code = req.getCode();
			String encryptedData = req.getEncryptedData();
			String iv = req.getIv();
			
			logger.info("login for wx code ====================" + code);
			logger.info("login for wx encryptedData ====================" + encryptedData);
			logger.info("login for wx iv ====================" + iv);
			
			String mobileNumber = RestClientUtil.getWxUserInfo(code, encryptedData, iv);
			
			if(StringUtils.isBlank(mobileNumber)){
				return new ServiceResult(ReturnResult.FAILURE, "获取用户手机号失败！");
			}
			
			User user = userManager.loginOrRegister(mobileNumber);
			
			JSONObject resultObj = loginResult(user);
			
			return new ServiceResult(ReturnResult.SUCCESS, resultObj);
		} catch (Exception e) {
			logger.error(ProjectConfig.PREFIX + "UserApi" + ".wxLogin:{}", e);
			return new ServiceResult(ReturnResult.FAILURE, "登陆失败: " + e.getMessage());
		}
	}
	
	private JSONObject loginResult(User user){
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("id", user.getId());
		jsonObject.put("name", user.getName());
		jsonObject.put("telphone", user.getTelphone());
		jsonObject.put("avatar", user.getAvatar());
		return jsonObject;
	}
}
