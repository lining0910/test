package com.taole.member.service.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.taole.framework.rest.RestUrlRuler;
import com.taole.framework.rest.ReturnResult;
import com.taole.framework.service.ServiceResult;
import com.taole.member.Constants.CardType;
import com.taole.member.Constants.MemberCardStatus;
import com.taole.member.ProjectConfig;
import com.taole.member.condition.MemberCardCondition;
import com.taole.member.config.MemberConfig;
import com.taole.member.domain.CardInfo;
import com.taole.member.domain.MemberCard;
import com.taole.member.domain.User;
import com.taole.member.domain.param.MemberCardApi.MemberCardInfo;
import com.taole.member.domain.param.MemberCardApi.UserMemberCard;
import com.taole.member.manager.CardInfoManager;
import com.taole.member.manager.MemberCardManager;
import com.taole.member.manager.UserBillManager;
import com.taole.member.manager.UserManager;
import com.taole.toolkit.dict.manager.DictionaryManager;
import com.taole.toolkit.util.DateStyle;
import com.taole.toolkit.util.DateUtil;

@Controller
@Api(tags = { "客户端用户会员卡接口管理" })
@RequestMapping(value = RestUrlRuler.REST_ROOT + "/" + ProjectConfig.PREFIX + "MemberCardApi")
public class MemberCardApi {
	
	private Logger logger = LoggerFactory.getLogger(MemberCardApi.class);
	
	@Autowired
	private UserManager userManager;
	
	@Autowired
	private MemberCardManager memberCardManager;
	
	@Autowired
	private CardInfoManager cardInfoManager;
	
	@Autowired
	private UserBillManager userBillManager;
	
	@Autowired
	private DictionaryManager dictionaryManager;
	
	@Autowired
	private MemberConfig memberConfig;

	@RequestMapping(value = "/collection/userMemberCard", method = RequestMethod.GET, produces = "application/json;")
	@ApiOperation(value = "获取用户会员卡列表", httpMethod = "GET", response = UserMemberCard.MemberCardApiUserMemberCardRsp.class)
	public @ResponseBody Object userMemberCard(HttpServletRequest request, HttpServletResponse response,
			@ApiParam(value = "用户ID", required = true) @RequestParam String userId){
		
		try {
			
			User user = userManager.getUser(userId);
			if(user == null)
				return new ServiceResult(ReturnResult.NOT_FOUND_OBJECT, "用户信息不存在");
			
			MemberCardCondition condition = new MemberCardCondition();
			condition.setUserId(userId);
			List<MemberCard> memberCards = memberCardManager.list(condition);
			
			JSONArray resultArray = new JSONArray();
			for(MemberCard mc : memberCards){
				JSONObject mcObject = new JSONObject();
				mcObject.put("userCardId", mc.getUserCardId());
				mcObject.put("userCardNo", mc.getCardNo());
				
				resultArray.add(mcObject);
			}
			
			return new ServiceResult(ReturnResult.SUCCESS, "用户会员卡获取成功", resultArray);
		} catch (Exception e) {
			
			logger.error(ProjectConfig.PREFIX + "MemberCardApi" + ".userMemberCard:{}", e);
			return new ServiceResult(ReturnResult.FAILURE, "用户会员卡获取失败: " + e.getMessage());
		}
	}
	
	@RequestMapping(value = "/collection/userMemberCardForRecharge", method = RequestMethod.GET, produces = "application/json;")
	@ApiOperation(value = "获取用户可充值会员卡列表", httpMethod = "GET", response = UserMemberCard.MemberCardApiUserMemberCardRsp.class)
	public @ResponseBody Object userMemberCardForRecharge(HttpServletRequest request, HttpServletResponse response,
			@ApiParam(value = "用户ID", required = true) @RequestParam String userId){
		
		try {
			
			User user = userManager.getUser(userId);
			if(user == null)
				return new ServiceResult(ReturnResult.NOT_FOUND_OBJECT, "用户信息不存在");
			
			MemberCardCondition condition = new MemberCardCondition();
			condition.setUserId(userId);
			condition.setStatus(MemberCardStatus.ACTIVE);
			List<MemberCard> memberCards = memberCardManager.list(condition);
			
			JSONArray resultArray = new JSONArray();
			for(MemberCard mc : memberCards){
				JSONObject mcObject = new JSONObject();
				mcObject.put("userCardId", mc.getUserCardId());
				mcObject.put("userCardNo", mc.getCardNo());
				
				resultArray.add(mcObject);
			}
			
			return new ServiceResult(ReturnResult.SUCCESS, "用户会员卡获取成功", resultArray);
		} catch (Exception e) {
			
			logger.error(ProjectConfig.PREFIX + "MemberCardApi" + ".userMemberCard:{}", e);
			return new ServiceResult(ReturnResult.FAILURE, "用户会员卡获取失败: " + e.getMessage());
		}
	}
	
	@RequestMapping(value = "/collection/memberCardInfo", method = RequestMethod.GET, produces = "application/json;")
	@ApiOperation(value = "获取用户会员卡详细信息", httpMethod = "GET", response = MemberCardInfo.MemberCardApiMemberCardInfoRsp.class)
	public @ResponseBody Object memberCardInfo(HttpServletRequest request, HttpServletResponse response,
			@ApiParam(value = "用户会员卡ID", required = true) @RequestParam String userCardId){
		
		try {
			
			MemberCard memberCard = memberCardManager.getMemberCard(userCardId);
			if(memberCard == null)
				return new ServiceResult(ReturnResult.NOT_FOUND_OBJECT, "无法根据用户会员卡ID获取卡信息");
			
			JSONObject resultObj = new JSONObject();
			resultObj.put("userCardId", memberCard.getUserCardId());
			resultObj.put("deadline", memberCard.getDeadline() != null ? DateUtil.DateToString(memberCard.getDeadline(), DateStyle.YYYY_MM_DD_CN) : "");
			resultObj.put("status", memberCard.getStatus());
			resultObj.put("statusName", dictionaryManager.getDictName(MemberCardStatus.DICTIONARY_MEMBERCARD_STATUS_CODE_ID, memberCard.getStatus()));
			resultObj.put("image", StringUtils.isNotBlank(memberCard.getCardImage()) ? memberCard.getCardImage() : memberConfig.getDefaultImage());
			
			CardInfo cardInfo = cardInfoManager.getCardInfo(memberCard.getCardId());
			resultObj.put("cardName", cardInfo.getCardName());
			resultObj.put("cardId", cardInfo.getCardId());
			resultObj.put("cardType", cardInfo.getCardType());
			resultObj.put("cardTypeName", dictionaryManager.getDictName(CardType.DICTIONARY_CARD_TYPE_CODE_ID, cardInfo.getCardType()));
			
			int blanceNum = 0;
			if(memberCard.getStatus().equals(MemberCardStatus.T0_BE_OPEN)){
				blanceNum = cardInfo.getTotalNum();
			}else{
				blanceNum = userBillManager.getBalanceNum(memberCard.getUserCardId());
			}
			resultObj.put("balanceNum", blanceNum);
			return new ServiceResult(ReturnResult.SUCCESS, "用户会员卡详细信息获取成功", resultObj);
		} catch (Exception e) {
			
			logger.error(ProjectConfig.PREFIX + "MemberCardApi" + ".memberCardInfo:{}", e);
			return new ServiceResult(ReturnResult.FAILURE, "用户会员卡详细信息获取失败: " + e.getMessage());
		}
	}
}
