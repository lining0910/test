/**
 * Project:member
 * File:memberCardManager.java 
 * Copyright 2014-2016 Bei Jing Yi Sheng Jia Technology Development Co., Ltd. All rights reserved.
 */
package com.taole.member.manager;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.HibernateException;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.taole.framework.annotation.DomainEngine;
import com.taole.framework.dao.DomainObjectDao;
import com.taole.framework.dao.util.PaginationSupport;
import com.taole.framework.dao.util.Range;
import com.taole.framework.dao.util.Sorter;
import com.taole.framework.events.EventMethod;
import com.taole.framework.util.SerializableJSONTransformer;
import com.taole.framework.util.UUID;
import com.taole.member.Constants.CardExpire;
import com.taole.member.Constants.CardStatus;
import com.taole.member.Constants.CardType;
import com.taole.member.Constants.PayType;
import com.taole.member.Constants.TransactionType;
import com.taole.member.Constants.UserBillApplyStatus;
import com.taole.member.ProjectConfig;
import com.taole.member.condition.CardInfoCondition;
import com.taole.member.condition.MemberCardCondition;
import com.taole.member.condition.UserBillApplyCondition;
import com.taole.member.condition.UserCondition;
import com.taole.member.domain.CardInfo;
import com.taole.member.domain.MemberCard;
import com.taole.member.domain.User;
import com.taole.member.sql.UserBillApplySql;
import com.taole.member.sql.UserSql;
import com.taole.toolkit.dict.manager.DictionaryManager;
import com.taole.toolkit.util.ArrayListUtil;

/**
 * @author  Generator
 * @version $Id$
 */
@DomainEngine(types = User.class)
@Transactional(readOnly = true)
public class UserManager {
	
	@Resource(name = ProjectConfig.PREFIX + "userDao")
	DomainObjectDao<User> userDao;
	
	@Autowired
	private DictionaryManager dictionaryManager;
	
	@DomainEngine.C
	@EventMethod
	@Transactional
	public String createUser(User user) {
		if(StringUtils.isBlank(user.getId()))
			user.setId(UUID.generateUUID());
		
		user.setCreateTime(new Date());
		return userDao.createObject(user);
	}

	@DomainEngine.U
	@EventMethod
	@Transactional
	public void updateUser(User user) {
		userDao.updateObject(user);
	}
	
	@DomainEngine.D
	@EventMethod
	@Transactional
	public void deleteUser(User user) {
		userDao.deleteObject(user);
	}
	
	@DomainEngine.R
	public User getUser(String id) {
		return userDao.loadObject(id);
	}
	
	public List<User> list(UserCondition condition) {
		return userDao.listByCondition(condition);
	}
	public List<User> list(UserCondition condition, Sorter sorter, int limit) {
		return userDao.listByCondition(condition, sorter, limit);
	}
	
	public PaginationSupport<User> search(UserCondition condition, Range range, Sorter sroter) {
		return userDao.search(condition, range, sroter);
	}
	
	public int count(UserCondition condition){
		return userDao.countByCondition(condition);
	}
	
	public User findByCondition(UserCondition condition) {
		List<User> list = userDao.listByCondition(condition, 1);
		if (list.size() == 0) {
			return null;
		} else {
			return list.get(0);
		}
	}
	
	public Object searchToJson(UserCondition condition, Range range, Sorter sroter){
		PaginationSupport<User> ps = search(condition, range, sroter);
		JSONArray resultAry = new JSONArray();
		for(User user : ps.getItems()){
			JSONObject obj = (JSONObject) SerializableJSONTransformer.transformPojo2Jso(user);
			
			//obj.put("cardTypeName", dictionaryManager.getDictName(CardType.DICTIONARY_CARD_TYPE_CODE_ID, cardInfo.getCardType()));
			//obj.put("cardStatusName", dictionaryManager.getDictName(CardStatus.DICTIONARY_CARD_STATUS_CODE_ID, cardInfo.getStatus()));
			//obj.put("cardExpireName", dictionaryManager.getDictName(CardExpire.DICTIONARY_CARD_EXPIRE_CODE_ID, cardInfo.getChargeType()));
			resultAry.add(obj);
		}
		return resultAry;
	}
	public JSONArray searchToJsonBySql(final UserCondition condition, final int start, final int limit) {
		List<?> userBilApplyList = ((HibernateDaoSupport) userDao).getHibernateTemplate().executeWithNativeSession(new HibernateCallback<List<?>>() {
			@Override
			public List<?> doInHibernate(Session session) throws HibernateException, SQLException {
				String sql = UserSql.getUser4Operator(condition);
				SQLQuery sqlQuery = session.createSQLQuery(sql);
				sqlQuery.setFirstResult(start);
				sqlQuery.setMaxResults(limit);
				List<?> list = sqlQuery.list();
				return list;
			}
		});

		JSONArray resultAry = new JSONArray();
		for(int i=0; i<userBilApplyList.size(); i++){
			Object[] objs = (Object[]) userBilApplyList.get(i);
			
			String name = (String) objs[0];
			String telphone = (String) objs[1];
			Date createTime = (Date) objs[2];
			String userId = (String) objs[3];
			JSONObject jsonObject = new JSONObject();
		
			jsonObject.put("name", name);
			jsonObject.put("telphone", telphone);
			jsonObject.put("createTime", createTime);
			jsonObject.put("userId", userId);
			resultAry.add(jsonObject);
		}
		return resultAry;
	}
}
