package com.taole.member.service.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.taole.framework.rest.RestUrlRuler;
import com.taole.framework.rest.ReturnResult;
import com.taole.framework.service.ServiceResult;
import com.taole.member.ProjectConfig;
import com.taole.member.domain.param.CmsApi.Notice;
import com.taole.member.utils.RestClientUtil;
import com.taole.toolkit.util.DateStyle;
import com.taole.toolkit.util.DateUtil;

@Controller
@Api(tags = { "内容接口管理" })
@RequestMapping(value = RestUrlRuler.REST_ROOT + "/" + ProjectConfig.PREFIX + "CmsApi")
public class CmsApi {
	private Logger logger = LoggerFactory.getLogger(CmsApi.class);
	
	@RequestMapping(value = "/collection/notice", method = RequestMethod.GET, produces = "application/json;")
	@ApiOperation(value = "获取系统运营公告", httpMethod = "GET", response = Notice.CmsApiNoticeRsp.class)
	public @ResponseBody Object notice(HttpServletRequest request, HttpServletResponse response){
		
		try {
			
			JSONObject noticeObject = RestClientUtil.notice();
			if(noticeObject.getString("code").equals("1")){
				JSONArray items = noticeObject.getJSONObject("result").getJSONArray("items");
				JSONObject resultObject = new JSONObject();
				if(items.size() > 0){
					resultObject.put("author", items.getJSONObject(0).get("author"));
					resultObject.put("text", items.getJSONObject(0).get("text"));
					resultObject.put("createTime", DateUtil.StringToString(items.getJSONObject(0).getString("createTime"), DateStyle.YYYY_MM_DD_CN));
				}
				
				return new ServiceResult(ReturnResult.SUCCESS, "获取运营公告成功", resultObject);
			}else {
				return new ServiceResult(ReturnResult.FAILURE, noticeObject.getString("description"));
			}
			
		} catch (Exception e) {
			
			logger.error(ProjectConfig.PREFIX + "CmsApi" + ".notice:{}", e);
			return new ServiceResult(ReturnResult.FAILURE, "获取运营公告失败: " + e.getMessage());
		}
	}
}
